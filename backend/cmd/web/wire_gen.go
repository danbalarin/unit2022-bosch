// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/unit2022-bosch/teapot/backend/internal/app/orm"
	"github.com/unit2022-bosch/teapot/backend/internal/app/webserver"
	"github.com/unit2022-bosch/teapot/backend/internal/services/auth"
	"github.com/unit2022-bosch/teapot/backend/internal/services/items"
	"github.com/unit2022-bosch/teapot/backend/internal/services/journeys"
	"github.com/unit2022-bosch/teapot/backend/internal/services/warehouse"
)

// Injectors from wire.go:

func BuildWebServer() (*webserver.App, error) {
	webConfig, err := webserver.NewWebConfig()
	if err != nil {
		return nil, err
	}
	dbConfig, err := orm.NewDbConfig()
	if err != nil {
		return nil, err
	}
	db, err := orm.NewDB(dbConfig)
	if err != nil {
		return nil, err
	}
	iAuthRepository := auth.NewAuthGormRepository(db)
	authConfig := auth.NewAuthConfig()
	iAuthService := auth.NewAuthService(iAuthRepository, authConfig)
	authRestController := auth.NewAuthRestController(iAuthService)
	iItemsRepository := items.NewRepository(db)
	iItemsService := items.NewService(iItemsRepository)
	itemsRestController := items.NewController(iItemsService)
	iJourneyRepository := journeys.NewRepository(db)
	iJourneyService := journeys.NewService(iJourneyRepository)
	journeysRestController := journeys.NewController(iJourneyService)
	iWarehouseRepository := warehouse.NewRepository(db)
	iWarehouseService := warehouse.NewService(iWarehouseRepository)
	warehouseRestController := warehouse.NewController(iWarehouseService)
	router := webserver.NewRouter(authRestController, itemsRestController, journeysRestController, warehouseRestController)
	iAuthDbSeeder := auth.NewAuthDbSeeder(iAuthService)
	iJourneyDbSeeder := journeys.NewDbSeeder(iJourneyService)
	iItemsDbSeeder := items.NewDbSeeder(iItemsService)
	iWarehouseDbSeeder := warehouse.NewDbSeeder(iWarehouseService)
	migrator := orm.NewMigrator(db, iAuthDbSeeder, iJourneyDbSeeder, iItemsDbSeeder, iWarehouseDbSeeder)
	app := webserver.NewApp(webConfig, router, migrator)
	return app, nil
}
